@page "/"
@page "/dashboard"
@using BlazorApp1.Data
@inject BlazorApp1.Services.SetService setService
@inject BlazorApp1.Services.MqttService mqttService
@inject BlazorApp1.Services.GetService getService

<div class="container">
    <div class="container text-center">
        <div class="row">
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">Client Id = @entrySet.MQTT_CLIENT_ID</span>
            </div>
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">Broker = @entrySet.MQTT_BROKER</span>
            </div>
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">Port = @entrySet.MQTT_PORT</span>
            </div>
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">User = @entrySet.MQTT_USER</span>
            </div>
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">Password = @entrySet.MQTT_PASSWORD</span>
            </div>
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">Topic Publish = @entrySet.MQTT_TOPIC_PUB</span>
            </div>
            <div class="col m-1">
                <span class="input-group-text" id="inputGroup-sizing-default">Topic Subscribe = @entrySet.MQTT_TOPIC_SUB</span>
            </div>
        </div>
        <div class="row">
            @if (conectedServer)
            {
                <div class="col m-1">
                    <div class="alert alert-success" role="alert"> Conected </div>
                </div>
            }
            @if (!conectedServer)
            {
                <div class="col m-1">
                    <div class="alert alert-danger" role="alert"> Not Conected </div>
                </div>
            }
        </div>
     </div>
</div>

@if (conectedServer)
{
    <div class="container">
        <h4 class="mb-2 mt-2">Subscribe Info</h4>

        <div class="container text-center">
            <div class="row">
                <div class="col">
                    <div class="input-group mb-2">
                        <span class="input-group-text" id="inputGroup-sizing-default">Temperature Current</span>
                        <input @bind="entryGet.Temperature" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" disabled>
                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-2">
                        <span class="input-group-text" id="inputGroup-sizing-default">New Temperature</span>
                        <input @bind="entryGet.Temperature" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                    </div>
                </div>
            </div>
            <div class="row mb-2 mt-2">
                <div class="btn-group" role="group" aria-label="Basic outlined example">
                    <button type="button" class="btn btn-outline-success" @onclick="@Publish">Publish</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private System.Threading.Timer? timer;

    DataSet entrySet = new()
    {
            MQTT_CLIENT_ID = "grupo4",
            MQTT_BROKER = "lrfia.uai.edu.ar",
            MQTT_PORT = 8741,
            MQTT_USER = "alumnos",
            MQTT_PASSWORD = "",
            MQTT_TOPIC_PUB = "grupo4/topic_sub",
            MQTT_TOPIC_SUB = "grupo4/topic_pub",
            MQTT_SENSOR = "sensor_1",
            MQTT_ACTUADOR = "actuador_1",
            MQTT_STATUS = "actuador_2"
    };

    DataGet entryGet = new DataGet();

    bool conectedServer = true;

    protected override async Task OnInitializedAsync()
    {
        Subscribe();
    }

    // private async Task<bool> Connection() => (mqttService.ConnectClient(entrySet) != null) ? true : false;

    private async void Subscribe() => entryGet = await mqttService.Subscribe_Topic(entrySet);

    private async void Publish() => await mqttService.Publish_Application_Message(entrySet, entryGet);

}
